//
// Generated file, do not edit! Created by opp_msgc 4.2 from src/node/application/finalApplication/StatusPkt.msg.
//

#ifndef _STATUSPKT_M_H_
#define _STATUSPKT_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0402
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "ApplicationPacket_m.h"
// }}



/**
 * Struct generated from src/node/application/finalApplication/StatusPkt.msg by opp_msgc.
 */
struct status
{
    status();
    unsigned short nodeID;
    double locX;
    double locY;
    double spentEnergy;
};

void doPacking(cCommBuffer *b, status& a);
void doUnpacking(cCommBuffer *b, status& a);

/**
 * Struct generated from src/node/application/finalApplication/StatusPkt.msg by opp_msgc.
 */
struct orders
{
    orders();
    unsigned short nodeID;
    bool stingyMode;
};

void doPacking(cCommBuffer *b, orders& a);
void doUnpacking(cCommBuffer *b, orders& a);

/**
 * Class generated from <tt>src/node/application/finalApplication/StatusPkt.msg</tt> by opp_msgc.
 * <pre>
 * packet StatusPkt extends ApplicationPacket { 
 *   status extraData;
 *   orders someData;
 * }
 * </pre>
 */
class StatusPkt : public ::ApplicationPacket
{
  protected:
    status extraData_var;
    orders someData_var;

  private:
    void copy(const StatusPkt& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const StatusPkt&);

  public:
    StatusPkt(const char *name=NULL, int kind=0);
    StatusPkt(const StatusPkt& other);
    virtual ~StatusPkt();
    StatusPkt& operator=(const StatusPkt& other);
    virtual StatusPkt *dup() const {return new StatusPkt(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual status& getExtraData();
    virtual const status& getExtraData() const {return const_cast<StatusPkt*>(this)->getExtraData();}
    virtual void setExtraData(const status& extraData);
    virtual orders& getSomeData();
    virtual const orders& getSomeData() const {return const_cast<StatusPkt*>(this)->getSomeData();}
    virtual void setSomeData(const orders& someData);
};

inline void doPacking(cCommBuffer *b, StatusPkt& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, StatusPkt& obj) {obj.parsimUnpack(b);}


#endif // _STATUSPKT_M_H_
